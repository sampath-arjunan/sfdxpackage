name: Package Release Beta Version
on:
  workflow_dispatch:
    inputs:
      versionName:
        description: 'Name of version  (ie 5.5.0)'
        required: true
      versionCode:
        description: 'Version number (XXXX)'
        required: true
jobs:
  createrelease:
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v2
    - name: Create release branch
      run: git checkout -b release/v${{ github.event.inputs.versionName }}
    - name: Initialize mandatory git config
      run: |
       git config user.name "GitHub Actions"
       git config user.email noreply@github.com
    - name: Change version number and name
      run: printf 'ext.version_code = ${{ github.event.inputs.versionCode }}\next.version_name = "${{ github.event.inputs.versionName }}"\n' > app_versions.gradle
      
    - name: Commit changelog and manifest files
      id: make-commit
      run: |
        git add app_versions.gradle
        git add README.md
        git commit --message "Prepare release ${{ github.event.inputs.versionName }}"
        echo "::set-output name=commit::$(git rev-parse HEAD)"
    - name: Push new branch
      run: git push origin release/v${{ github.event.inputs.versionName }}
      
    # Installs Salesforce CLi
    - name: Install Salesforce CLI
      run: |
        wget https://developer.salesforce.com/media/salesforce-cli/sfdx-cli/channels/stable/sfdx-cli-linux-x64.tar.xz
        mkdir sfdx
        tar xJf sfdx-cli-linux-x64.tar.xz -C sfdx --strip-components 1
        ./sfdx/install
        sfdx --version
        
    - name: Install jq
      run: |
        sudo apt-get install jq
    - name: Authenticate to Dev Hub org
      run: |
        echo "${{secrets.SFL_SECRET_KEY}}" | base64 -d > server.key 
        sfdx auth:jwt:grant -u ${{secrets.SFL_USERNAME}} -f server.key -i ${{secrets.SFL_CONSUMER_KEY}} -r https://login.salesforce.com
        sfdx config:set defaultdevhubusername=${{secrets.SFL_USERNAME}}
  
   
    # Create package version and extract its id
    - name: 'Create package version'
      id: createPackageVersion
      run: |
        set +e
        json=$(sfdx force:package:version:create -p GIFter -x -w 20 -f config/project-scratch-def.json --json)
        echo $json
        status=$(echo $json | jq '.status')
        if [ $status == "0" ]; then
          packageVersionId=$(echo $json | jq -r '.result.SubscriberPackageVersionId')
          echo "::set-output name=packageVersionId::$packageVersionId"
        else
          echo "sfdx force:package:version:create failed"
        fi
        exit $status
        
    - name: Store new version id
      run: |
        sed -i -e "s/04t[[:alnum:]]\{15\}/${version_id}/" README.md
        git config user.name "release[bot]"
        git config user.email "<>"
        git add README.md
        git add sfdx-project.json
        git commit -m "Updating new pre-release version"
        git push origin release/v${{ github.event.inputs.versionName }}
